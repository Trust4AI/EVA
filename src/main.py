from typing import List, Union

import uvicorn
from fastapi import FastAPI

from core.schemas import schemas
from evaluators import three_reasons_evaluator, yn_evaluator, wh_question_evaluator

PREFIX = '/api/v1'

app = FastAPI(openapi_url="/api/v1/openapi.json", docs_url="/api/v1/docs", redoc_url="/api/v1/redoc")


# @app.post("/evaluate", response_model=List[schemas.TestResult],
#           response_description="Evaluate inputs",
#           description="Evaluate inputs",
#           summary="Evaluate inputs",
#           responses={200: {"description": "List of inputs"}, 500: {"description": "Internal Server Error"}})
# async def evaluate(inputs: Union[List[schemas.Input], schemas.Input], model: str = "2b"):
#     if type(inputs) != list:
#         if inputs.expected_result.lower() in ['yes', 'no']:
#             return await yn_evaluator.evaluate_yes_no(inputs, model)

#     if type(inputs) == list:
#         yes_no_inputs = [input for input in inputs if input.expected_result.lower() in ['yes', 'no']]
#         explain_inputs = [input for input in inputs if input.expected_result.lower() not in ['yes', 'no']]
#         if len(yes_no_inputs) > 0 and len(explain_inputs) == 0:
#             return await yn_evaluator.evaluate_yes_no(inputs, model)
#         elif  len(explain_inputs) > 0 and len(yes_no_inputs) == 0:
#             return await explain_three_reasons.evaluate_explain(inputs, model)
#         else:
#             return (await yn_evaluator.evaluate_yes_no(yes_no_inputs, model) +
#                     await explain_three_reasons.evaluate_explain(explain_inputs, model))


@app.post(f"{PREFIX}/evaluate", response_model=Union[str, List[str]],
          response_description="Evaluate outputs generated by llm",
          description="Evaluate outputs generated by llm",
          summary="Evaluate outputs generated by llm",
          responses={200: {"description": "List of evaluations results"},
                     500: {"description": "Internal Server Error"}})
async def evaluate(outputs: Union[List[schemas.Output], schemas.Output], evaluation_type: str):
    print(outputs)
    if evaluation_type == 'yes_no':
        if type(outputs) == list:
            result = []
            for output in outputs:
                result.append(yn_evaluator.evaluate_yes_no(output.expected_result, output.generated_result))
            return result
        else:
            return yn_evaluator.evaluate_yes_no(outputs.expected_result, outputs.generated_result)

    if evaluation_type == 'three_reasons':
        if type(outputs) == list:
            result = []
            for output in outputs:
                result.append(
                    three_reasons_evaluator.evaluate_three_reasons(output.expected_result, output.generated_result))
            return result
        else:
            return three_reasons_evaluator.evaluate_three_reasons(outputs.expected_result, outputs.generated_result)
    if evaluation_type == 'wh_question':
        if type(outputs) == list:
            result = []
            for output in outputs:
                result.append(
                    wh_question_evaluator.evaluate_wh_question(output.expected_result, output.generated_result))
            return result
        else:
            return wh_question_evaluator.evaluate_wh_question(outputs.expected_result, outputs.generated_result)


if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8001)
